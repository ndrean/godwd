daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 2 %>;

events {
  use epoll;
  accept_mutex on;
  worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

error_log stderr;

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;

  server_tokens off;

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
  access_log  <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
  error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;


  include mime.types;
  default_type application/octet-stream;
  sendfile on;

  # Must read the body in 5 seconds.
  client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  upstream app_server {
		<%# server unix:/app/tmp/sockets/nginx.socket fail_timeout=0; %>
    server godwd-api.herokuapp.com:80 fail_timeout=0;
 	}

  server {
    # nginx listens on ENV['PORT'] for incomming http request
    listen <%= ENV['PORT']%>;

    # which domain are we listening for
    server_name _;

    keepalive_timeout 5;
    client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>;

    # try_files $uri @app_server;

    # Set up the location to map all requests to the Ruby App
    location / {
      proxy_pass http://app_server;
      proxy_set_header x-forwarded-host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host godwd-api.herokuapp.com;
    }

    

    <%# location @app_server {
      proxy_pass http://app_server;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
    } %>
  }
}
